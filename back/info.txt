The code you’ve provided for storing product features can be kept in a **separate Python file** to maintain a clear separation of concerns. Here’s how you can structure your project:

### **Project Structure Example**:
```
/your_project
    /app
        app.py           # Main Flask app for handling image uploads and feature extraction
        store_features.py  # File for storing product features in MongoDB
    /models
        mobilenet_model.py  # (Optional) If you prefer to separate model loading
    /static
        /images           # Directory to store images if needed
    /templates
        # Your HTML templates, if any
    requirements.txt      # List of dependencies
```

### **Reason for Separation**:
- **`app.py`** will handle the main Flask app routes, feature extraction, and database queries (e.g., the `/upload` endpoint).
- **`store_features.py`** will be responsible for populating your MongoDB database with product metadata and pre-extracted features, using a separate script that you can run once or as needed.

### **Updated File Breakdown**:

#### **1. `app.py`** (Main Flask Application)
```python
from flask import Flask, request, jsonify
from flask_pymongo import PyMongo
import tensorflow as tf
import numpy as np
from PIL import Image
import io

app = Flask(__name__)
app.config["MONGO_URI"] = "mongodb://localhost:27017/your_db_name"
mongo = PyMongo(app)

# Load pre-trained MobileNetV2 model
model = tf.keras.applications.MobileNetV2(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
model.trainable = False

# Utility functions for image processing and feature extraction
def preprocess_image(image_data):
    img = Image.open(io.BytesIO(image_data))
    img = img.resize((224, 224))
    img_array = np.array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)
    return img_array

def extract_features(image_data):
    img_array = preprocess_image(image_data)
    features = model.predict(img_array)
    return features.flatten()

# Cosine similarity calculation
def cosine_similarity(a, b):
    dot_product = np.dot(a, b)
    magnitude_a = np.linalg.norm(a)
    magnitude_b = np.linalg.norm(b)
    return dot_product / (magnitude_a * magnitude_b)

@app.route('/upload', methods=['POST'])
def upload_image():
    if 'file' not in request.files:
        return jsonify({'error': 'No file part'}), 400

    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': 'No selected file'}), 400

    image_data = file.read()
    user_features = extract_features(image_data)

    # Compare with products in the MongoDB database
    similar_products = []
    products = mongo.db.products.find()

    for product in products:
        image_url = product.get('image_url')
        product_features = product.get('features')
        if product_features:
            similarity = cosine_similarity(user_features, product_features)
            similar_products.append({
                'name': product.get('name'),
                'image_url': image_url,
                'price': product.get('price'),
                'description': product.get('description'),
                'similarity': similarity
            })

    similar_products = sorted(similar_products, key=lambda x: x['similarity'], reverse=True)[:5]
    return jsonify(similar_products)

if __name__ == '__main__':
    app.run(debug=True)
```

#### **2. `store_features.py`** (Populate MongoDB with Product Data)
```python
import requests
from flask_pymongo import PyMongo
import tensorflow as tf
import numpy as np
from PIL import Image
import io
from app import app  # Assuming app.py is in the same directory

mongo = PyMongo(app)

# Load pre-trained MobileNetV2 model
model = tf.keras.applications.MobileNetV2(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
model.trainable = False

def preprocess_image(image_data):
    img = Image.open(io.BytesIO(image_data))
    img = img.resize((224, 224))
    img_array = np.array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)
    return img_array

def extract_features(image_data):
    img_array = preprocess_image(image_data)
    features = model.predict(img_array)
    return features.flatten()

def store_product_features():
    products = [
        {'name': 'T-shirt', 'image_url': 'https://example.com/tshirt.jpg', 'price': 25.99, 'description': 'A comfortable t-shirt'},
        {'name': 'Jeans', 'image_url': 'https://example.com/jeans.jpg', 'price': 49.99, 'description': 'Stylish denim jeans'}
    ]
    
    for product in products:
        image_data = requests.get(product['image_url']).content
        features = extract_features(image_data)
        product['features'] = features
        mongo.db.products.insert_one(product)

if __name__ == '__main__':
    store_product_features()
```

### **How to Run the Code**:

1. **Start MongoDB**: Ensure MongoDB is running on your local machine or on a cloud service.
   
2. **Run `store_features.py`**: This script will populate your MongoDB database with product metadata and pre-extracted image features.

   ```bash
   python store_features.py
   ```

3. **Run `app.py`**: After populating MongoDB, you can run your Flask app:

   ```bash
   python app.py
   ```

4. **Upload Image**: Use Postman or an HTTP client to upload an image to the `/upload` endpoint and get the recommendations.

### **Why Separate Files?**
- **Modular Design**: Separating the functionality into different files keeps your code organized and easy to maintain.
- **Reusable**: `store_features.py` can be reused to update your MongoDB database whenever new products are added.
- **Simplifies Testing**: If you need to update the feature extraction logic, `store_features.py` can be updated independently without touching the API logic.

Let me know if you need any adjustments!